% Encoding: UTF-8

@Thesis{Brysbaert2021,
  author      = {Brysbaert, Sam},
  date        = {2021},
  institution = {HoGent},
  title       = {GraphQL vs REST: een vergelijkende studie},
  type        = {Bachelorproef},
  url         = {https://catalogus.hogent.be/catalog/hog01:000739595},
  abstract    = {In deze bachelorproef werd er een praktische vergelijking gemaakt tussen REST en GraphQL voor APIs. Dit werd gedaan aan de hand van twee proof-of-concepts, een die gebruik maakte van REST en een van GraphQL.},
  file        = {:pdfs/2857_201862183_PBA-TIN_scriptie.pdf:PDF},
  keywords    = {API, REST, GraphQL},
}

@Article{Informatica2021,
  author       = {Informatica, Inc.},
  date         = {2021-04-01},
  title        = {Accelerator Guide},
  editor       = {Informatica® Data Quality},
  url          = {https://docs.informatica.com/data-quality-and-governance/data-quality/10-5/accelerator-guide/introduction-to-accelerators/accelerators-overview.html},
  urldate      = {2022-10-06},
  version      = {10.5},
  abstract     = {Accelerators are content bundles that address common data quality problems in a country, a region, or an industry. An accelerator might contain mapplets or rule specifications that you can use to analyze and enhance the data in an organization. An accelerator might also contain data domains that you can use to discover the types of information that the data contains.
You import the mapplets, rule specifications, and data domains to the Model repository. Informatica configures the objects to respond to the business rules that you might define for the organization data.},
  file         = {:pdfs/DQ_105_AcceleratorGuide_en.pdf:PDF},
  keywords     = {accelerator, core accelerator, data domains accelerator, financial services accelerator},
  organization = {Informatica Inc.},
  type         = {software},
}

@Article{LopezNovoa2015,
  author       = {Unai Lopez-Novoa and Alexander Mendiburu and Jose Miguel-Alonso},
  date         = {25 February 2014},
  journaltitle = {IEEE Transactions on Parallel and Distributed Systems},
  title        = {A Survey of Performance Modeling and Simulation Techniques for Accelerator-Based Computing},
  doi          = {10.1109/TPDS.2014.2308216},
  issn         = {1558-2183},
  issue        = {1},
  number       = {1},
  pages        = {272--281},
  url          = {https://ieeexplore.ieee.org/abstract/document/6748067},
  urldate      = {2022-10-06},
  volume       = {26},
  abstract     = {The high performance computing landscape is shifting from collections of homogeneous nodes towards heterogeneous systems, in which nodes consist of a combination of traditional out-of-order execution cores and accelerator devices. Accelerators, built around GPUs, many-core chips, FPGAs or DSPs, are used to offload compute-intensive tasks. The advent of this type of systems has brought about a wide and diverse ecosystem of development platforms, optimization tools and performance analysis frameworks. This is a review of the state-of-the-art in performance tools for heterogeneous computing, focusing on the most popular families of accelerators: GPUs and Intel's Xeon Phi. We describe current heterogeneous systems and the development frameworks and tools that can be used for developing for them. The core of this survey is a review of the performance models and tools, including simulators, proposed in the literature for these platforms.},
  file         = {:pdfs/lopez-novoa2015.pdf:PDF},
  journal      = {{IEEE} Transactions on Parallel and Distributed Systems},
  month        = {jan},
  publisher    = {Institute of Electrical and Electronics Engineers ({IEEE})},
  year         = {2015},
}

@Article{Yin2020,
  author       = {Shihui Yin and Zhewei Jiang and Minkyu Kim and Tushar Gupta and Mingoo Seok and Jae-Sun Seo},
  date         = {14 October 2019},
  journaltitle = {IEEE Transactions on Very Large Scale Integration (VLSI) Systems},
  title        = {Vesti: Energy-Efficient In-Memory Computing Accelerator for Deep Neural Networks},
  doi          = {10.1109/TVLSI.2019.2940649},
  issn         = {1557-9999},
  number       = {1},
  pages        = {48--61},
  url          = {https://ieeexplore.ieee.org/abstract/document/8867863},
  urldate      = {2022-10-06},
  volume       = {28},
  abstract     = {To enable essential deep learning computation on energy-constrained hardware platforms, including mobile, wearable, and Internet of Things (IoT) devices, a number of digital ASIC designs have presented customized dataflow and enhanced parallelism. However, in conventional digital designs, the biggest bottleneck for energy-efficient deep neural networks (DNNs) has reportedly been the data access and movement. To eliminate the storage access bottleneck, new SRAM macros that support in-memory computing have been recently demonstrated. Several in-SRAM computing works have used the mix of analog and digital circuits to perform XNOR-and-ACcumulate (XAC) operation without row-by-row memory access and can map a subset of DNNs with binary weights and binary activations. In the single array level, large improvement in energy efficiency (e.g., two orders of magnitude improvement) has been reported in computing XAC over digital-only hardware performing the same operation. In this article, by integrating many instances of such in-memory computing SRAM macros with an ensemble of peripheral digital circuits, we architect a new DNN accelerator, titled Vesti. This new accelerator is designed to support configurable multibit activations and large-scale DNNs seamlessly while substantially improving the chip-level energyefficiency with favorable accuracy tradeoff compared to conventional digital ASIC. Vesti also employs double-buffering with two groups of in-memory computing SRAMs, effectively hiding the row-by-row write latencies of in-memory computing SRAMs. The Vesti accelerator is fully designed and laid out in 65-nm CMOS, demonstrating ultralow energy consumption of <; 20 nJ for MNIST classification and <; 40 μJ for CIFAR-10 classification at 1.0-V supply.},
  file         = {:pdfs/yin2019.pdf:PDF},
  journal      = {{IEEE} Transactions on Very Large Scale Integration ({VLSI}) Systems},
  month        = {jan},
  publisher    = {Institute of Electrical and Electronics Engineers ({IEEE})},
  year         = {2020},
}

@Article{Snehasish2015,
  author       = {Snehasish, Kumar and Naveen, Vedula and Arrvindh, Shriraman and Vijayalakshmi, Srinivasan},
  date         = {08 June 2015},
  journaltitle = {DASX. Proceedings of the 29th ACM on International Conference on Supercomputing 1 },
  title        = {{DASX}},
  doi          = {10.1145/2751205.2751231},
  pages        = {361–372},
  url          = {https://dl.acm.org/doi/abs/10.1145/2751205.2751231},
  abstract     = {Recent research [3,37,38] has proposed compute accelerators to address the energy efficiency challenge. While these compute accelerators specialize and improve the compute efficiency, they have tended to rely on address-based load/store memory interfaces that closely resemble a traditional processor core. The address-based load/store interface is particularly challenging in data-centric applications that tend to access different software data structures. While accelerators optimize the compute section, the address-based interface leads to wasteful instructions and low memory level parallelism (MLP). We study the benefits of raising the abstraction of the memory interface to data structures.

We propose DASX (Data Structure Accelerator), a specialized state machine for data fetch that enables compute accelerators to efficiently access data structure elements in iterative program regions. DASX enables the compute accelerators to employ data structure based memory operations and relieves the compute unit from having to generate addresses for each individual object. DASX exploits knowledge of the program's iteration to i) run ahead of the compute units and gather data objects for the compute unit (i.e., compute unit memory operations do not encounter cache misses) and ii) throttle the fetch rate, adaptively tile the dataset based on the locality characteristics and guarantee cache residency. We demonstrate accelerators for three types of data structures, Vector, Key-Value (Hash) maps, and BTrees. We demonstrate the benefits of DASX on data-centric applications which have varied compute kernels but access few regular data structures. DASX achieves higher energy efficiency by eliminating data structure instructions and enabling energy efficient compute accelerators to efficiently access the data elements. We demonstrate that DASX can achieve 4.4x the performance of a multicore system by discovering more parallelism from the data structure.},
  booktitle    = {Proceedings of the 29th {ACM} on International Conference on Supercomputing},
  file         = {:pdfs/kumar2015.pdf:PDF},
  month        = {jun},
  publisher    = {{ACM}},
  year         = {2015},
}

@Article{Kumar2014,
  author       = {Snehasish Kumar and Arrvindh Shriraman and Vijayalakshmi Srinivasan and Dan Lin and Jordon Phillips},
  date         = {24 August 2014},
  journaltitle = {Proceedings of the 23rd international conference on Parallel architectures and compilation ACM},
  title        = {{SQRL}},
  doi          = {10.1145/2628071.2628118},
  url          = {https://dl.acm.org/doi/abs/10.1145/2628071.2628118},
  urldate      = {2022-10-06},
  abstract     = {Software data structures are a critical aspect of emerging data-centric applications which makes it imperative to improve the energy efficiency of data delivery. We propose SQRL, a hardware accelerator that integrates with the last-level-cache (LLC) and enables energy-efficient iterative computation on data structures. SQRL integrates a data structure-specific LLC refill engine (Collector) with a compute array of lightweight processing elements (PEs). The collector exploits knowledge of the compute kernel to i) run ahead of the PEs in a decoupled fashion to gather data objects and ii) throttle fetch rate and adaptively tile the dataset based on the locality characteristics. The collector exploits data structure knowledge to find the memory level parallelism and eliminate data structure instructions.},
  booktitle    = {Proceedings of the 23rd international conference on Parallel architectures and compilation},
  file         = {:pdfs/kumar2014.pdf:PDF},
  month        = {aug},
  publisher    = {{ACM}},
  year         = {2014},
}

@Article{Li2014,
  author       = {Yinan Li and Jignesh M. Patel},
  date         = {01 June 2014},
  journaltitle = {Proceedings of the VLDB Endowment},
  title        = {{WideTable}},
  doi          = {10.14778/2732951.2732965},
  number       = {10},
  pages        = {907--918},
  url          = {https://dl.acm.org/doi/abs/10.14778/2732951.2732965},
  volume       = {7},
  abstract     = {This paper presents a technique called WideTable that aims to improve the speed of analytical data processing systems. A WideTable is built by denormalizing the database, and then converting complex queries into simple scans on the underlying (wide) table. To avoid the pitfalls associated with denormalization, e.g. space overheads, WideTable uses a combination of techniques including dictionary encoding and columnar storage. When denormalizing the data, WideTable uses outer joins to ensure that queries on tables in the schema graph, which are now nested as embedded tables in the WideTable, are processed correctly. Then, using a packed code scan technique, even complex queries on the original database can be answered by using simple scans on the WideTable(s). We experimentally evaluate our methods in a main memory setting using the queries in TPC-H, and demonstrate the effectiveness of our methods, both in terms of raw query performance and scalability when running on many-core machines.},
  file         = {:pdfs/10.1.1.650.2556.pdf:PDF},
  journal      = {Proceedings of the {VLDB} Endowment},
  month        = {jun},
  publisher    = {{VLDB} Endowment},
  year         = {2014},
}

@Thesis{Willem2021,
  author      = {Willem, Jan},
  date        = {2021},
  institution = {Hogeschool Gent},
  title       = {API design voor realtime event afhandeling: GraphQL versus REST},
  type        = {eindwerk},
  language    = {Nederlands},
  url         = {https://scriptie.hogent.be/2020-2021/2957_201970574_PBA-TIN_scriptie.pdf},
  urldate     = {2022-11-01},
  abstract    = {In deze bachelor proef is er een vergelijkende studie gebeurt rond het afhandelen van realtime events tussen GraphQL en REST.},
  file        = {:pdfs/API.pdf:PDF},
  keywords    = {API, realtime, REST, GraphQL},
}

@Software{Byron2015,
  author       = {Lee Byron},
  date         = {2015-09-14},
  editor       = {Meta},
  title        = {GraphQL: A data query language},
  organization = {Meta},
  type         = {software},
  url          = {https://engineering.fb.com/2015/09/14/core-data/graphql-a-data-query-language/},
  urldate      = {2022-12-01},
  keywords     = {Core Data, DevInfra},
}

@Software{GraphQLFoundation2022,
  author       = {The GraphQL Foundation,},
  date         = {2022},
  organization = {The GraphQL Foundation},
  url          = {https://graphql.org/foundation/},
  urldate      = {2022-12-01},
  owner        = {the Linux Foundation},
}

@Manual{Lievens2021,
  author     = {Stijn Lievens},
  date       = {2021-01-27},
  title      = {Probleemoplossend Denken II},
  pages      = {240},
  subtitle   = {Lesnota’s},
  titleaddon = {Professionele Bachelor in de Toegepaste Informatica},
  file       = {:pdfs/pod2stijnlieven.pdf:PDF},
}

@Book{Martin1983,
  author    = {Martin, James},
  date      = {1983},
  title     = {Managing the data-base environment},
  isbn      = {9780135505823},
  pages     = {766},
  publisher = {Prentice-Hall},
}

@Article{Nayak2013,
  author       = {A, Nayak and A, Poriya and Dikshay, Poojary},
  date         = {2013-01},
  journaltitle = {International Journal of Applied Information Systems (IJAIS},
  title        = {Type of nosql databases and its comparison with relational databases},
  issn         = {2249-0868},
  number       = {4},
  series       = {Foundation of Computer Science FCS, New York, USA},
  url          = {https://www.researchgate.net/publication/302557703_Article_Type_of_nosql_databases_and_its_comparison_with_relational_databases},
  urldate      = {2022-12-01},
  volume       = {5},
  file         = {:pdfs/databank.pdf:PDF},
}

@Book{Martin2017,
  author    = {Martin, Robert C.},
  date      = {2017-09},
  title     = {Clean Architecture},
  isbn      = {0134494164},
  pages     = {432},
  publisher = {Pearson},
  subtitle  = {A Craftsman's Guide to Software Structure and Design},
}

@Software{Microsoft2023,
  author       = {Microsoft},
  date         = {2023},
  title        = {Azure-producten},
  language     = {Nederlands},
  organization = {Microsoft},
  type         = {software},
  url          = {https://azure.microsoft.com/nl-nl/products/},
  urldate      = {2023-01-12},
}

@Book{Copeland2015,
  author    = {Copeland, Marshall and Soh, Julian and Puca, Anthony and Manning, Mike and Gollob, David},
  date      = {2015-10-08},
  title     = {Microsoft Azure},
  isbn      = {978-1-4842-1043-7},
  pagetotal = {426},
  publisher = {Springer-Verlag GmbH},
  url       = {https://www.ebook.de/de/product/25127919/marshall_copeland_julian_soh_anthony_puca_mike_manning_david_gollob_microsoft_azure.html},
  ean       = {9781484210437},
  year      = {2015},
}

@Article{Beimborn2011,
  author       = {Daniel Beimborn and Thomas Miletzki and Stefan Wenzel},
  date         = {2011-10},
  journaltitle = {Business {\&}amp$\mathsemicolon$ Information Systems Engineering},
  title        = {Platform as a Service ({PaaS})},
  doi          = {10.1007/s12599-011-0183-3},
  number       = {6},
  pages        = {381--384},
  volume       = {3},
  publisher    = {Springer Science and Business Media {LLC}},
}

@Article{Manvi2014,
  author       = {Sunilkumar S. Manvi and Gopal Krishna Shyam},
  date         = {2014-05},
  journaltitle = {Journal of Network and Computer Applications},
  title        = {Resource management for Infrastructure as a Service ({IaaS}) in cloud computing: A survey},
  doi          = {10.1016/j.jnca.2013.10.004},
  pages        = {424--440},
  url          = {https://doi.org/10.1016/j.jnca.2013.10.004},
  volume       = {41},
  publisher    = {Elsevier {BV}},
}

@Manual{W3C1999,
  author     = {W3C},
  date       = {1999},
  title      = {XSL Transformations (XSLT)},
  subtitle   = {Version 1.0},
  titleaddon = {W3C Recommendation 16 November 1999},
  url        = {http://new.renderx.com/files/demos/xmlspec/xslt/REC-xslt-19991116.pdf},
}

@Comment{jabref-meta: databaseType:biblatex;}
